{"version":3,"sources":["logo.svg","components/form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","state","react_default","a","createElement","onSubmit","this","props","weather","className","type","placeholder","name","React","Component","API","App","city","temp","humidity","wind","description","_callee","event","place","link","apiLink","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","value","fetch","sent","json","_this","setState","main","speed","stop","src_components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sNCsBzBC,gOAlBbC,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKC,MAAMC,QAASC,UAAU,mBAC5CP,EAAAC,EAAAC,cAAA,SACEK,UAAU,eACVC,KAAK,OACLC,YAAY,OACZC,KAAK,SAEPV,EAAAC,EAAAC,cAAA,UAAQK,UAAU,QAAlB,mBAZSI,IAAMC,YCEnBC,EAAM,mCAuDGC,6MApDbf,MAAQ,CACNgB,KAAM,GACNC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,YAAa,MAGfb,8CAAU,SAAAc,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACRT,EAAMU,iBACAT,EAAQD,EAAMW,OAAOjB,KAAKkB,MAC1BV,EACJ,qDACAD,EACA,UACAT,EACA,gBARMe,EAAAE,KAAA,EAUcI,MAAMX,GAVpB,cAUFC,EAVEI,EAAAO,KAAAP,EAAAE,KAAA,EAYWN,EAAQY,OAZnB,OAYFX,EAZEG,EAAAO,KAaJb,GACFe,EAAKC,SAAS,CACZvB,KAAM,SAAWU,EAAKf,KACtBM,KAAM,gBAAkBS,EAAKc,KAAKvB,KAAO,mBACzCC,SAAU,aAAeQ,EAAKc,KAAKtB,SAAW,KAC9CC,KAAM,cAAgBO,EAAKP,KAAKsB,MAAQ,OACxCrB,YAAa,gBAAkBM,EAAKnB,QAAQ,GAAGiC,OAnB3C,yBAAAX,EAAAa,SAAArB,oIAyBR,OACEpB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,0BAGFF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,8BACbP,EAAAC,EAAAC,cAACwC,EAAD,CAAMpC,QAASF,KAAKE,WAEtBN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAMH,KAAKL,MAAMgB,MAChCf,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAMH,KAAKL,MAAMiB,MAChChB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAMH,KAAKL,MAAMkB,UAChCjB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAMH,KAAKL,MAAMmB,MAChClB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAMH,KAAKL,MAAMoB,qBA/CtBR,IAAMC,WCKJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.efbe9175.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./form.css\";\r\n\r\nclass Form extends React.Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.props.weather} className=\" col-12 d-flex \">\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder=\"city\"\r\n            name=\"city\"\r\n          />\r\n          <button className=\"btn \">Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Form from \"./components/form.js\";\n\nconst API = \"2713fd06941d8e3fccbddc5cc138f2bf\";\n\nclass App extends React.Component {\n  state = {\n    city: [],\n    temp: [],\n    humidity: [],\n    wind: [],\n    description: []\n  };\n\n  weather = async event => {\n    event.preventDefault();\n    const place = event.target.city.value;\n    const link =\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n      place +\n      \"&appid=\" +\n      API +\n      \"&units=metric\";\n\n    const apiLink = await fetch(link);\n\n    const data = await apiLink.json();\n    if (place) {\n      this.setState({\n        city: \"City: \" + data.name,\n        temp: \"Temperature: \" + data.main.temp + \" degrees Celsius\",\n        humidity: \"Humidity: \" + data.main.humidity + \" %\",\n        wind: \"Windspeed: \" + data.wind.speed + \" m/s\",\n        description: \"Description: \" + data.weather[0].main\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <h1>WEATHER APP</h1>\n        </div>\n\n        <div className=\"row justify-content-center\">\n          <Form weather={this.weather} />\n        </div>\n        <div className=\"el\">{this.state.city}</div>\n        <div className=\"el\">{this.state.temp}</div>\n        <div className=\"el\">{this.state.humidity}</div>\n        <div className=\"el\">{this.state.wind}</div>\n        <div className=\"el\">{this.state.description}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}